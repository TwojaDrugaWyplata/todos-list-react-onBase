{"version":3,"sources":["Header/index.js","Form/index.js","Buttons/index.js","Tasks/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","addTask","useState","newTaskName","setNewTaskName","onSubmit","event","preventDefault","nameWithoutWhitespace","trim","className","value","placeholder","autoFocus","onChange","target","Buttons","directionOfSort","hideDoneTasks","tasks","togglehHideDoneTasks","markAllTasksAsDone","sortTasks","length","onClick","disabled","every","done","Tasks","hideDone","removeTask","toggleTaskDone","map","name","id","key","Section","extraHeaderContent","sectionBody","Container","children","App","JSON","parse","localStorage","getItem","setTasks","setHideDoneTasks","setDirectionOfSort","getHighestId","Math","max","useEffect","setItem","stringify","task","sort","a","b","localeCompare","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7ee9dd4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ title }) => (\n  <header>\n    <h1>\n      {title}\n    </h1>\n  </header>\n)\n\nexport default Header;","import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nconst Form = ({ addTask }) => {\n  const [newTaskName, setNewTaskName] = useState(\"\");\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    const nameWithoutWhitespace = newTaskName.trim();\n    if (nameWithoutWhitespace) {\n      addTask(nameWithoutWhitespace);\n      setNewTaskName(\"\");\n    }\n  }\n\n  return (\n    <form onSubmit={onFormSubmit} className=\"form\">\n      <input\n        value={newTaskName}\n        className=\"form__input\"\n        placeholder=\"Co jest do zrobienia?\"\n        autoFocus\n        onChange={({ target }) => setNewTaskName(target.value)}\n      />\n      <button className=\"form__button\">Dodaj zadanie</button>\n    </form>\n  )\n}\n\nexport default Form;","import React from \"react\";\nimport \"./styles.css\";\n\nconst Buttons = ({ directionOfSort, hideDoneTasks, tasks, togglehHideDoneTasks, markAllTasksAsDone, sortTasks }) => (\n  <div className=\"buttons\">\n    {tasks.length > 0 &&\n      <>\n        <button onClick={sortTasks} className=\"buttons__button\">\n          Posortuj zadania {directionOfSort === null ? \"\" : directionOfSort === \"asc\" ? \"↓\" : \"↑\"}\n        </button>\n        <button onClick={togglehHideDoneTasks} className=\"buttons__button\">\n          {hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\n        </button>\n        <button\n          onClick={markAllTasksAsDone}\n          className=\"buttons__button\"\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Ukończ wszystkie\n        </button>\n      </>\n    }\n  </div>\n)\n\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\"\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n    <ul className=\"tasksList\">\n        {tasks.map(({ name, id, done }) => (\n            <li\n                key={id}\n                className={`tasksList__item${hideDone && done ? \" tasksList__item--hidden\" : \"\"}`}>\n                <button\n                    className={`tasksList__button\n                    ${done ? \"\" : \" tasksList__button--taskNotDone\"}`}\n                    onClick={() => toggleTaskDone(id)}\n                />\n                <span className={`tasksList__task ${done ? \"\" : \" tasksList__task--taskNotDone\"}`}>\n                    {name}\n                </span>\n                <button\n                    className=\"tasksList__button tasksList__button--deleteButton\"\n                    onClick={() => removeTask(id)}\n                />\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./styles.css\";\n\nconst Section = ({ title, extraHeaderContent, sectionBody }) => (\n  <section className=\"section\">\n    <header className=\"section__header\">\n      <h2 className=\"section__title\">\n        {title}\n      </h2>\n      {extraHeaderContent}\n    </header>\n    {sectionBody}\n  </section>\n)\n\nexport default Section;","import React from \"react\";\nimport \"./styles.css\";\n\nconst Container = ({ children }) => (\n  <main className=\"container\">\n    {children}\n  </main>\n)\n\nexport default Container;","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Tasks from \"./Tasks\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\n\nconst App = () => {\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n  const [hideDoneTasks, setHideDoneTasks] = useState(false);\n  const [directionOfSort, setDirectionOfSort] = useState(null);\n\n  const getHighestId = () => Math.max(...tasks.map(({ id }) => id));\n\n  const addTask = (name) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? getHighestId() + 1 : 1,\n        name,\n        done: false,\n      }\n    ]);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      return task.id === id ? ({\n        ...task,\n        done: !task.done\n      }) : (task);\n    }));\n  };\n\n  const togglehHideDoneTasks = () => {\n    setHideDoneTasks(!hideDoneTasks);\n  };\n\n  const markAllTasksAsDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const sortTasks = () => {\n    setDirectionOfSort(directionOfSort === \"asc\" ? \"desc\" : \"asc\");\n    setTasks(tasks => [...tasks].sort(\n      (a, b) => directionOfSort === \"asc\" ? b.name.localeCompare(a.name) : a.name.localeCompare(b.name)\n    ));\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks])\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        sectionBody={<Form addTask={addTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={\n          <Buttons\n            directionOfSort={directionOfSort}\n            hideDoneTasks={hideDoneTasks}\n            tasks={tasks}\n            togglehHideDoneTasks={togglehHideDoneTasks}\n            markAllTasksAsDone={markAllTasksAsDone}\n            sortTasks={sortTasks}\n          />\n        }\n        sectionBody={\n          <Tasks\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}